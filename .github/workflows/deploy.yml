name: Deploy Alexa Gemini Plugin

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found, skipping..."

    - name: Test application startup
      run: |
        timeout 10s python main.py &
        sleep 5
        curl -f http://localhost:8000/health || exit 1

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          TARGET_DIR="/home/admin/alexa-gemini-plugin"

          # Substitua com a URL SSH do seu repositório
          REPO_URL="git@github.com:ISMendys/alexa-gemini.git"

          # --- Lógica de Deploy ---
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          # Verifica se o diretório de destino já existe
          if [ -d "$TARGET_DIR" ]; then
            # Se existe, entra na pasta e atualiza o código
            echo "Diretório encontrado. Atualizando o projeto..."
            cd "$TARGET_DIR" || exit 1
            git pull origin main || git pull origin master
          else
            # Se não existe, clona o repositório pela primeira vez
            echo "Diretório não encontrado. Clonando o projeto..."
            git clone "$REPO_URL" "$TARGET_DIR" || exit 1
            cd "$TARGET_DIR" || exit 1
          fi
          
          # Pare os contêineres antigos e construa a nova imagem localmente
          # O comando --build força a reconstrução da imagem a partir do Dockerfile
          docker-compose up -d --build
          
          # Remova imagens Docker antigas e não utilizadas
          docker image prune -a -f
          
          # Verifique se a aplicação está rodando
          sleep 10
          curl -f http://localhost/health || exit 1
          
          echo "Deployment completed successfully!"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi